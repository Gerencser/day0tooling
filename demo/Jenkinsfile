pipeline {
   agent any

   stages {
      stage('Build') {
         steps {
             withEnv(["JAVA_HOME=${tool 'Java11'}","PATH+MAVEN=${tool 'Mvn3'}/bin:${env.JAVA_HOME}/bin"]) {

            // Get some code from a GitHub repository
            git 'https://github.com/Gerencser/day0tooling.git'

            sh "cd demo; mvn -V -Dmaven.test.skip=true clean compile package"
            }
         }

        //  post {
        //     // If Maven was able to run the tests, even if some of the test
        //     // failed, record the test results and archive the jar file.
        //     success {
        //       junit '**/target/surefire-reports/TEST-*.xml'
        //       archiveArtifacts 'demo/target/*.jar'
        //     }
        //  }
      }
      stage('CreateEnvironment') {
         steps {
             withCredentials(
                    [
                        string(credentialsId: 'accessid', variable: 'ACCESS_KEY'),
                        string(credentialsId: 'secret', variable: 'SECRET_ACCESS_KEY'),
                        string(credentialsId: 'dbpwd', variable: 'DB_USER_PWD')
                    ]
                ) {
               catchError {
                    sh '''
                        eval \$(ssh-agent -s);
                        ssh-add /home/tomcat/.ssh/aws;
                        cd demo/environment;
                        echo ${DB_USER_PWD}
                        /opt/terraform/terraform init;
                        /opt/terraform/terraform refresh -var 'key_name=demo' -var 'public_key_path=/home/tomcat/.ssh/aws.pub' -var "accesskey=\$ACCESS_KEY" -var "secretaccesskey=\$SECRET_ACCESS_KEY" -var "db_user_pwd=\$DB_USER_PWD"
                        /opt/terraform/terraform apply -var 'key_name=demo' -var 'public_key_path=/home/tomcat/.ssh/aws.pub' -var "accesskey=\$ACCESS_KEY" -var "secretaccesskey=\$SECRET_ACCESS_KEY" -var "db_user_pwd=\$DB_USER_PWD" -auto-approve
                    '''
               }
               sh "sleep 60s"
            }
         }
      }
      stage('SetupEnvironment') {
         steps {
             withCredentials(
                    [
                        string(credentialsId: 'dbpwd', variable: 'DB_USER_PWD')
                    ]
                ) {
                sh '''
                    cd demo/environment;
                    APPLICATION_HOST=$(/opt/terraform/terraform output application_address);
                    DATABASE_HOST=$(/opt/terraform/terraform output database_address);
                    DB_URL=jdbc:mysql://10.0.1.200:3306/demodb;
                    eval \$(ssh-agent -s);
                    ssh-add /home/tomcat/.ssh/aws;
                    cd ../target;
                    scp demo-0.0.1-SNAPSHOT.jar ubuntu@\$APPLICATION_HOST:/home/ubuntu/demo.jar
                    ssh ubuntu@\$APPLICATION_HOST "nohup java -jar /home/ubuntu/demo.jar --spring.datasource.url=\$DB_URL &";
                '''
                }
         }
      }
   }
}